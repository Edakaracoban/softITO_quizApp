@using Microsoft.AspNetCore.Identity
@using QuizProject.Data.Models
@inject UserManager<ApplicationUser> UserManager

@{
    var user = User?.Identity?.IsAuthenticated == true ? await UserManager.GetUserAsync(User) : null;
    var userName = user?.FullName ?? "Student User";
    var profileImageUrl = user?.ProfileImageUrl;
    var role = "Student";
    var roleColor = "#198754";
    var roleIcon = "🎓";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Admin Dashboard - Modern Panel</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            box-sizing: border-box;
        }

        .has-submenu {
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .submenu a {
            display: block;
            margin: 5px 0;
            text-decoration: none;
            color: #444;
        }

            .submenu a:hover {
                text-decoration: underline;
            }

        body {
            margin: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f7fa;
            color: #333;
            display: flex;
            min-height: 100vh;
            overflow-x: hidden;
            transition: background-color 0.3s, color 0.3s;
        }

            body.dark-mode {
                background-color: #121212;
                color: #eee;
            }

        .sidebar {
            width: 70px;
            background: #222;
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 1rem 0;
            transition: width 0.3s ease;
            position: fixed;
            height: 100vh;
            z-index: 100;
            user-select: none;
        }

            .sidebar:hover {
                width: 240px;
            }

            .sidebar .logo {
                font-size: 1.7rem;
                font-weight: 700;
                margin-bottom: 2rem;
                white-space: nowrap;
                opacity: 0;
                transition: opacity 0.3s;
            }

            .sidebar:hover .logo {
                opacity: 1;
            }

            .sidebar nav {
                flex-grow: 1;
                width: 100%;
            }

                .sidebar nav a {
                    display: flex;
                    align-items: center;
                    gap: 1rem;
                    padding: 1rem;
                    color: #ccc;
                    text-decoration: none;
                    font-weight: 600;
                    white-space: nowrap;
                    border-radius: 0 20px 20px 0;
                    transition: background 0.3s, color 0.3s;
                }

                    .sidebar nav a:hover,
                    .sidebar nav a.active {
                        background: #dc3545;
                        color: white;
                    }

                    .sidebar nav a .icon {
                        font-size: 1.4rem;
                        width: 24px;
                        text-align: center;
                    }

                    .sidebar nav a .text {
                        opacity: 0;
                        transition: opacity 0.3s;
                        display: inline;
                    }

            .sidebar:hover nav a .text {
                opacity: 1;
            }

        main.content {
            margin-top: 60px; /* Header yüksekliği kadar boşluk */
            margin-left: 70px;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            height: calc(100vh - 60px);
            transition: margin-left 0.3s;
            overflow: hidden;
        }

        .sidebar:hover ~ main.content {
            margin-left: 240px;
        }

        header.header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            width: 100%;
            z-index: 1000;
            background: white;
            padding: 0 2rem;
            height: 60px;
            box-shadow: 0 2px 8px rgb(0 0 0 / 0.1);
            display: flex;
            align-items: center;
            justify-content: space-between;
            font-weight: 600;
            transition: background-color 0.3s, color 0.3s;
        }

        body.dark-mode header.header {
            background: #1f1f1f;
            color: #ddd;
            box-shadow: none;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }

        #modeToggle {
            font-size: 1.5rem;
            cursor: pointer;
            background: transparent;
            border: none;
            color: inherit;
            user-select: none;
            transition: transform 0.3s ease;
        }

            #modeToggle:hover {
                transform: scale(1.2);
            }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
            position: relative;
            cursor: pointer;
            user-select: none;
        }

            .user-info .avatar {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                background: #dc3545;
                color: white;
                display: flex;
                justify-content: center;
                align-items: center;
                font-weight: 700;
                font-size: 1.3rem;
            }

            .user-info .name {
                white-space: nowrap;
                font-weight: 600;
            }

            .user-info .dropdown {
                position: absolute;
                top: 100%;
                right: 0;
                background: white;
                border-radius: 6px;
                box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
                display: none;
                min-width: 160px;
                z-index: 10;
            }

        body.dark-mode .user-info .dropdown {
            background: #222;
            color: #eee;
        }

        .user-info.open .dropdown {
            display: block;
        }

        .dropdown a {
            display: block;
            padding: 0.75rem 1rem;
            color: inherit;
            text-decoration: none;
            transition: background 0.2s;
        }

            .dropdown a:hover {
                background: #dc3545;
                color: white;
            }

        section.page-content {
            padding: 2rem;
            overflow-y: auto;
            flex-grow: 1;
            background: white;
            border-radius: 10px;
            margin: 1rem 2rem 2rem 2rem;
            box-shadow: 0 4px 14px rgba(0, 0, 0, 0.05);
            transition: background-color 0.3s, color 0.3s;
        }

        body.dark-mode section.page-content {
            background: #222;
            color: #eee;
        }

        #toast-container {
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
            z-index: 9999;
        }

        .toast {
            background: #dc3545;
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
            opacity: 0;
            transform: translateX(100%);
            animation: slideIn 0.4s forwards;
            font-weight: 600;
        }

            .toast.success {
                background: #198754;
            }

        @@keyframes slideIn {
            to

        {
            opacity: 1;
            transform: translateX(0);
        }

        }

        .avatar img.user-avatar {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 50%;
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .sidebar

        {
            width: 60px;
            position: fixed;
            bottom: 0;
            top: auto;
            height: 60px;
            flex-direction: row;
            padding: 0;
            justify-content: space-around;
        }

        .sidebar:hover {
            width: 60px;
        }

        .sidebar .logo,
        .sidebar nav a .text {
            display: none !important;
        }

        main.content {
            margin-top: 60px;
            margin-left: 0;
            margin-bottom: 60px;
            height: calc(100vh - 60px);
        }

        header.header {
            padding: 0 1rem;
        }

        section.page-content {
            margin: 1rem;
            padding: 1rem;
        }

        .user-info .name {
            display: none;
        }

        }
    </style>
    @RenderSection("Styles", required: false)
</head>
<body>

    <main class="content" role="main">
        <header class="header">
            <div class="d-flex align-items-center w-100">
                <div class="fw-bold">@roleIcon @role</div>

                <!-- Buraya margin-left: auto; ver, sağa it -->
                <div class="header-right d-flex align-items-center" style="margin-left: auto; gap: 1rem;">
                    <button id="modeToggle" title="Toggle Dark/Light Theme" aria-label="Toggle Theme">🌙</button>

                    <div class="user-info" tabindex="0" aria-haspopup="true" aria-expanded="false">
                        <div class="avatar" aria-hidden="true">
                            @if (!string.IsNullOrEmpty(profileImageUrl))
                            {
                                <img src="@(!string.IsNullOrEmpty(user.ProfileImageUrl) ? user.ProfileImageUrl : "/img/default-avatar.png")" alt="Avatar" class="user-avatar" />
                            }
                            else
                            {
                                @userName.Substring(0, 1).ToUpper()
                            }
                        </div>

                        <div class="dropdown" role="menu" aria-label="User menu">
                            <a asp-controller="Dashboard" asp-action="UserDetails" asp-route-id="@user?.Id" role="menuitem">Profile</a>


                            <a href="/Account/Settings" role="menuitem">Settings</a>
                            <a href="/Account/Index" role="menuitem">Logout</a>
                        </div>
                    </div>

                    <div id="top-right-gif">
                        <img src="~/img/giphy.gif" alt="App Icon" style="width: 50px; height: 50px;" />
                    </div>
                </div>
            </div>
        </header>



        <section>
            @RenderBody()
        </section>
    </main>

    <div id="toast-container" aria-live="assertive" aria-atomic="true"></div>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const usersToggle = document.getElementById("users-toggle");
            const usersSubmenu = document.getElementById("users-submenu");

            usersToggle.addEventListener("click", (e) => {
                e.preventDefault();
                const isVisible = usersSubmenu.style.display === "block";
                usersSubmenu.style.display = isVisible ? "none" : "block";
                usersToggle.querySelector(".arrow").textContent = isVisible ? "▼" : "▲";
            });

            // İstersen başka yerde tıklanınca kapanması için:
            document.addEventListener("click", (e) => {
                if (!usersToggle.contains(e.target) && !usersSubmenu.contains(e.target)) {
                    usersSubmenu.style.display = "none";
                    usersToggle.querySelector(".arrow").textContent = "▼";
                }
            });
        });
        const modeToggle = document.getElementById('modeToggle');
        const userInfo = document.querySelector('.user-info');
        const prefersDarkScheme = window.matchMedia("(prefers-color-scheme: dark)");

        function setMode(dark) {
            if (dark) {
                document.body.classList.add('dark-mode');
                modeToggle.textContent = '☀️';
            } else {
                document.body.classList.remove('dark-mode');
                modeToggle.textContent = '🌙';
            }
            localStorage.setItem('theme', dark ? 'dark' : 'light');
        }

        function loadMode() {
            const stored = localStorage.getItem('theme');
            if (stored) {
                setMode(stored === 'dark');
            } else {
                setMode(prefersDarkScheme.matches);
            }
        }

        modeToggle.addEventListener('click', () => {
            setMode(!document.body.classList.contains('dark-mode'));
        });

        loadMode();

        userInfo.addEventListener('click', () => {
            userInfo.classList.toggle('open');
            const expanded = userInfo.getAttribute('aria-expanded') === 'true';
            userInfo.setAttribute('aria-expanded', !expanded);
        });

        userInfo.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                userInfo.click();
            }
        });

        document.addEventListener('click', e => {
            if (!userInfo.contains(e.target)) {
                userInfo.classList.remove('open');
                userInfo.setAttribute('aria-expanded', false);
            }
        });

        const toastContainer = document.getElementById('toast-container');

        function showToast(message, type = 'error') {
            const toast = document.createElement('div');
            toast.classList.add('toast', type === 'success' ? 'success' : 'error');
            toast.textContent = message;
            toastContainer.appendChild(toast);
            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateX(100%)';
                setTimeout(() => toast.remove(), 400);
            }, 3500);
        }
    </script>
    @RenderSection("Scripts", required: false)

</body>
</html>
