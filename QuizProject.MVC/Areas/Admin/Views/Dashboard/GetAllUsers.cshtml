@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    ViewData["Title"] = "Users Management";

    var roleInfos = new Dictionary<string, (string Color, string Icon)>
    {
        { "Admin", ("#dc3545", "🛡️") },
        { "Teacher", ("#0d6efd", "📚") },
        { "Student", ("#198754", "🎓") }
    };
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

@model List<QuizProject.MVC.ViewModels.UserViewModel>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />

<style>
    body.modal-open-blur #pageContent {
        filter: blur(4px);
        pointer-events: none;
        user-select: none;
        transition: filter 0.3s ease;
    }

    body {
        background: linear-gradient(135deg,#dc3545 0%, #ffffff 100%);
        ;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .user-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 20px;
    }

        .user-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 12px 25px rgba(0, 0, 0, 0.15);
        }

    .user-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid #dc3545;
        ;
        flex-shrink: 0;
    }

    .user-info {
        flex-grow: 1;
        min-width: 0;
    }

        .user-info h5 {
            font-weight: 700;
            margin-bottom: 5px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .user-info p {
            margin-bottom: 2px;
            color: #555;
            font-size: 0.9rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

    .role-badge {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 8px 14px;
        border-radius: 30px;
        font-weight: 500;
        font-size: 0.95rem;
        background-color: rgba(0, 0, 0, 0.05);
        color: #333;
        border: 1px solid #ccc;
        box-shadow: inset 0 0 4px rgba(0, 0, 0, 0.05);
        margin-bottom: 8px;
        max-width: max-content;
    }

        .role-badge .icon {
            font-size: 1.4rem;
            line-height: 1;
        }

    .action-buttons {
        display: flex;
        flex-direction: column;
        gap: 10px;
        min-width: 110px;
    }

        .action-buttons button, .action-buttons a.btn {
            min-width: 110px;
        }

            .action-buttons button:hover, .action-buttons a.btn:hover {
                opacity: 0.85;
            }

    .container {
        max-width: 900px;
        margin-top: 40px;
    }

    .header-section {
        margin-bottom: 30px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

        .header-section h2 {
            font-weight: 700;
            color: #333;
        }

    @@media (max-width: 575.98px) {
        .user-card {
            flex-direction: column;
            align-items: flex-start;
        }

        .action-buttons {
            flex-direction: row;
            width: 100%;
            justify-content: flex-start;
            margin-top: 15px;
            min-width: auto;
        }

            .action-buttons button, .action-buttons a.btn {
                min-width: auto;
                flex: 1;
            }
    }

    .modal-body {
        padding: 1.5rem 2rem;
        font-size: 1rem;
        color: #333;
    }

    #detailContent dl {
        display: grid;
        grid-template-columns: 120px 1fr;
        gap: 8px 16px;
        align-items: center;
        word-break: break-word;
    }

    #detailContent dt {
        font-weight: 600;
        color: #555;
    }

    #detailContent dd {
        margin: 0;
        font-weight: 400;
        color: #222;
        white-space: normal;
    }

    #detailProfileImage {
        width: 160px;
        height: 160px;
        object-fit: cover;
        border: 3px solid #dc3545;
        ;
        box-shadow: 0 4px 12px rgba(13, 110, 253, 0.4);
    }

    .modal-dialog {
        max-width: 500px;
        width: 90%;
    }

    @@media (max-width: 575.98px) {
        #detailContent dl {
            grid-template-columns: 100%;
        }

        #detailContent dt {
            margin-top: 10px;
        }
    }
</style>

<div id="pageContent">
    <div class="container">
        <div class="header-section">
            <h2>@ViewData["Title"] <i class="bi bi-people-fill"></i></h2>
            <div>
                <a href="@Url.Action("Index", "Dashboard", new { area = "Admin" })" class="btn btn-outline-primary me-2">
                    <i class="bi bi-speedometer2"></i> Dashboard
                </a>
                <a href="@Url.Action("LockedUsers", "Dashboard", new { area = "Admin" })" class="btn btn-warning">
                    <i class="bi bi-lock-fill"></i> Locked Users
                </a>
            </div>
        </div>

        @foreach (var user in Model)
        {
            var role = user.Role ?? "Unknown";
            var color = roleInfos.ContainsKey(role) ? roleInfos[role].Color : "#6c757d";
            var icon = roleInfos.ContainsKey(role) ? roleInfos[role].Icon : "❔";

            <div class="user-card">
                <img src="@(!string.IsNullOrEmpty(user.ProfileImageUrl) ? user.ProfileImageUrl : "/img/profile/default-avatar.png")" alt="Avatar" class="user-avatar" />
                <div class="user-info">
                    <div class="role-badge" style="border-left: 6px solid @color;">
                        <span class="icon">@icon</span> @role
                    </div>
                    <h5>@user.FullName</h5>
                    <p><i class="bi bi-envelope-fill"></i> @user.Email</p>
                </div>
                <div class="action-buttons">
                    <a href="#" class="btn btn-sm btn-info btn-details" title="User Details" data-userid="@user.Id">
                        <i class="bi bi-info-circle-fill"></i> Details
                    </a>
                    <a href="@Url.Action("EditUser", new { id = user.Id })" class="btn btn-sm btn-primary" title="Edit User">
                        <i class="bi bi-pencil-square"></i> Edit
                    </a>
                    <button type="button" class="btn btn-sm btn-danger btn-delete" data-userid="@user.Id">
                        <i class="bi bi-trash-fill"></i> Delete
                    </button>
                </div>
            </div>
        }
    </div>
</div>

<!-- User Detail Modal -->
<div class="modal fade" id="userDetailModal" tabindex="-1" aria-labelledby="userDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header" style="border-bottom:none;">
                <h5 class="modal-title" id="userDetailModalLabel">User Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeDetailModal"></button>
            </div>
            <div class="modal-body">
                <div id="detailContent" class="text-center">
                    <img id="detailProfileImage" src="" alt="Profile" class="rounded-circle mb-3" />
                    <dl>
                        <dt>ID</dt>
                        <dd id="detailId"></dd>
                        <dt>Full Name</dt>
                        <dd id="detailFullName"></dd>
                        <dt>Username</dt>
                        <dd id="detailUserName"></dd>
                        <dt>Email</dt>
                        <dd id="detailEmail"></dd>
                        <dt>Phone Number</dt>
                        <dd id="detailPhoneNumber"></dd>
                        <dt>Birth Date</dt>
                        <dd id="detailBirthDate"></dd>
                        <dt>Role</dt>
                        <dd id="detailRole"></dd>
                        <dt>Status</dt>
                        <dd id="detailStatus"></dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">Are you sure you want to delete this user?</div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Yes, Delete</button>
            </div>
        </div>
    </div>
</div>
<!-- Error Modal -->
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="errorModalLabel">Delete Failed</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="errorModalBody">
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const roleInfos = {
            "Admin": { color: "#dc3545", icon: "🛡️" },
            "Teacher": { color: "#0d6efd", icon: "📚" },
            "Student": { color: "#198754", icon: "🎓" }
        };

        const body = document.body;
        const modal = document.getElementById('userDetailModal');
        const bootstrapModal = new bootstrap.Modal(modal);
        const users = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

        // --- User Detail Modal ---
        document.querySelectorAll('.btn-details').forEach(button => {
            button.addEventListener('click', function (e) {
                e.preventDefault();
                const userId = this.dataset.userid;
                const user = users.find(u => u.Id.toString() === userId);
                if (!user) return;

                document.getElementById('detailId').textContent = user.Id || '';
                document.getElementById('detailProfileImage').src = user.ProfileImageUrl || '/img/profile/default-avatar.png';
                document.getElementById('detailFullName').textContent = user.FullName;
                document.getElementById('detailUserName').textContent = user.UserName;
                document.getElementById('detailEmail').textContent = user.Email;
                document.getElementById('detailPhoneNumber').textContent = user.PhoneNumber || '';
                document.getElementById('detailBirthDate').textContent = user.BirthDate ? new Date(user.BirthDate).toISOString().slice(0, 10) : '';

                const roleInfo = roleInfos[user.Role] || { color: '#6c757d', icon: '❔' };
                document.getElementById('userDetailModalLabel').innerHTML = `${roleInfo.icon} User Details - <span style="color:${roleInfo.color}; font-weight:bold;">${user.Role || 'Unknown'}</span>`;
                const roleElement = document.getElementById('detailRole');
                roleElement.textContent = `${roleInfo.icon} ${user.Role || 'Unknown'}`;
                roleElement.style.color = roleInfo.color;

                const statusElement = document.getElementById('detailStatus');
                if (user.IsLocked) {
                    statusElement.textContent = "Locked";
                    statusElement.style.color = '#dc3545';
                } else {
                    statusElement.textContent = "Active";
                    statusElement.style.color = '#198754';
                }

                bootstrapModal.show();
                body.classList.add('modal-open-blur');
            });
        });

        modal.addEventListener('hidden.bs.modal', () => body.classList.remove('modal-open-blur'));

        // --- Delete User ---
        let selectedUserId = null;
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
        document.querySelectorAll('.btn-delete').forEach(button => {
            button.addEventListener('click', function () {
                selectedUserId = this.dataset.userid;
                new bootstrap.Modal(document.getElementById('deleteConfirmModal')).show();
            });
        });

          confirmDeleteBtn.addEventListener('click', function () {
        if (!selectedUserId) return;

        fetch('@Url.Action("DeleteUser", "Dashboard", new { area = "Admin" })', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: new URLSearchParams({ id: selectedUserId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                document.getElementById('errorModalBody').textContent = data.message || "An unexpected error occurred.";
                new bootstrap.Modal(document.getElementById('errorModal')).show();
            }
        })
        .catch(error => {
            document.getElementById('errorModalBody').textContent = "Request failed: " + error;
            new bootstrap.Modal(document.getElementById('errorModal')).show();
        });
    });

    });
</script>
